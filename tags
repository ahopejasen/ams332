!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
1	project2/deterministic/html/deterministic.html	/^  <\/style><\/head><body><div class="content"><h2>Contents<\/h2><div><ul><li><a href="#1">Simulation of a non-linear system of ODEs<\/a><\/li><li><a href="#2">initializaton<\/a><\/li><li><a href="#3">Initialize variables<\/a><\/li><li><a href="#4">for notational convenience I'm describing the system using vector notation<\/a><\/li><li><a href="#5">define constant parameters of the simulated system<\/a><\/li><li><a href="#6">matrix of initial conditions<\/a><\/li><li><a href="#7">numerical approximation parameters<\/a><\/li><li><a href="#8">Project Part 1<\/a><\/li><li><a href="#12">Project Part 2<\/a><\/li><li><a href="#18">mesh plot of equilibrium vals (doMeshPlot recalculates data)<\/a><\/li><\/ul><\/div><h2>Simulation of a non-linear system of ODEs<a name="1"><\/a><\/h2><p>modeling deterministic phage lysis-lysogeny<\/p><p>The model uses two genes cI and cro, whose protein products inhibit each other's rna transcription:   croProtein -| cIRna -&gt; cIProtein   cIProtein -| croRna -&gt; croProtein<\/p><p>Inhibition of RNA transcription is modeled as % dimeric binding of inhibitive protein transcription factors to DNA using Hill-equation kinetics:   dCIRna\/dt= (1 - croProt^2\/(k1 + croProt^2) ) - degradation   dCroRna\/dt= (1 - CIProt^2\/(k2 + CIProt^2) ) - degradation        where k1,k2 are constants.<\/p><p>Production of Protein from RNA uses linear kinetics:   dCIProt\/dt= w1 CIRna - degradation; w1 is a constant   dCroProt\/dt= w2 CroRna - degradation ; w2 is a constant<\/p><p>Degradation kinetics for RNA and Protein for both genes are linear:   eg: dCIRna\/dt = production - X * CIRna, where X is a degradation constant<\/p><p>A forward Euler algorithm is used to numerically approximate the system.<\/p><pre class="codeinput"><span class="comment">%&lt;acknowlegments&gt;<\/span>$/;"	a
1	project2/deterministic/html/runSimulation.html	/^  <\/style><\/head><body><div class="content"><h2>Contents<\/h2><div><ul><li><a href="#1">function [timeVector,X,t_ode_cells,y_ode_cells]=runSimulation(theParms);<\/a><\/li><li><a href="#6">loop through the matrix of intial conditions<\/a><\/li><li><a href="#10">Call ode45()as a secondary algorithm if requested<\/a><\/li><\/ul><\/div><h2>function [timeVector,X,t_ode_cells,y_ode_cells]=runSimulation(theParms);<a name="1"><\/a><\/h2><p>the parameter theParms.N.doOde45 chooses algorithm: [0,1,2]=[forward euler only,both,odeOnly]<\/p><pre class="codeinput"><span class="keyword">function<\/span> [timeVector,X,dX,t_ode_cells,y_ode_cells]=runSimulation(theParms);$/;"	a
10	project2/deterministic/html/runSimulation.html	/^<\/pre><h2>Call ode45()as a secondary algorithm if requested<a name="10"><\/a><\/h2><pre class="codeinput">        <span class="keyword">if<\/span> (N.doOde45&gt;0)$/;"	a
12	project2/deterministic/html/deterministic.html	/^<\/pre><h2>Project Part 2<a name="12"><\/a><\/h2><p>$$ Plot cI_{prot} vs cro_{prot} for ICs 0-20<\/p><pre class="codeinput"><span class="comment">% $$ Plot cI_{prot} vs cro_{prot} for ICs 0-2000 $$<\/span>$/;"	a
18	project2/deterministic/html/deterministic.html	/^<\/pre><h2>mesh plot of equilibrium vals (doMeshPlot recalculates data)<a name="18"><\/a><\/h2><pre class="codeinput"><span class="keyword">if<\/span> doMesh$/;"	a
2	project2/deterministic/html/deterministic.html	/^<\/pre><h2>initializaton<a name="2"><\/a><\/h2><pre class="codeinput"><span class="comment">% add path to shared functions from project1<\/span>$/;"	a
3	project2/deterministic/html/deterministic.html	/^<\/pre><h2>Initialize variables<a name="3"><\/a><\/h2><pre class="codeinput">P=struct();$/;"	a
4	project2/deterministic/html/deterministic.html	/^<\/pre><img vspace="5" hspace="5" src="deterministic_01.png" alt=""> <h2>for notational convenience I'm describing the system using vector notation<a name="4"><\/a><\/h2><p>dX_dt=A(X); X(0)=X0; where X is a 4-vector, and A(X) is a vector function. the following constants allow me to use meaningful indices for the vectors:<\/p><pre class="codeinput">n_ir=1; <span class="comment">%cI rna<\/span>$/;"	a
5	project2/deterministic/html/deterministic.html	/^<\/pre><h2>define constant parameters of the simulated system<a name="5"><\/a><\/h2><pre class="codeinput">theParms.P=struct ( <span class="keyword">...<\/span>$/;"	a
6	project2/deterministic/html/deterministic.html	/^<\/pre><h2>matrix of initial conditions<a name="6"><\/a><\/h2><pre class="codeinput"><span class="comment">%rows are molecule types, cols are runs with different<\/span>$/;"	a
6	project2/deterministic/html/runSimulation.html	/^<\/pre><h2>loop through the matrix of intial conditions<a name="6"><\/a><\/h2><pre class="codeinput">	<span class="keyword">for<\/span> theRun=1:numRuns$/;"	a
7	project2/deterministic/html/deterministic.html	/^<\/pre><h2>numerical approximation parameters<a name="7"><\/a><\/h2><pre class="codeinput">theParms.N=struct ( <span class="keyword">...<\/span>$/;"	a
8	project2/deterministic/html/deterministic.html	/^<\/pre><h2>Project Part 1<a name="8"><\/a><\/h2><pre class="codeinput"><span class="comment">%run the approximation algorithms, once for each set of IC's<\/span>$/;"	a
doForwardEuler	project1/autoregODE/doForwardEuler.m	/^function [timeVect,X,dX_dt] =doForwardEuler(dX_dtFunct,X0,startTime,endTime,timeStep,noNegative)$/;"	f
doForwardEuler	shared/doForwardEuler.m	/^function [timeVect,X,dX_dt] =doForwardEuler(dX_dtFunct,X0,startTime,endTime,timeStep,noNegative)$/;"	f
doMeshPlot	project2/deterministic/doMeshPlot.m	/^function [ir0,or0,croAnsEul,cIAnsEul,croAnsOde,cIAnsOde ]=doMeshPlot(theParms,croSteps,cISteps)$/;"	f
doMeshPlot	project2/deterministic/html/doMeshPlot.html	/^function doMeshPlot(theParms,croSteps,cISteps)$/;"	f
fixTitle	shared/fixTitle.m	/^function fixTitle(hT)$/;"	f
hill	project1/hillEQ/hill.m	/^function result = hill(h,vMax,k,substrateRange)$/;"	f
hillEQ	project1/hillEQ/hillEQ.m	/^function hillEQ()$/;"	f
hillPlot	project1/hillEQ/hillEQ.m	/^function [hHandle,vResults]=hillPlot(stP)$/;"	f
is_octave	shared/is_octave.m	/^function r = is_octave ()$/;"	f
plotAll	project2/deterministic/plotAll.m	/^function plotAll(timeVector,X,t_ode_cells,y_ode_cells, theParms)$/;"	f
plotSimulation	project2/deterministic/plotSimulation.m	/^function plotSimulation(timeVector,X,t_ode_cells,y_ode_cells,theParms,doLog)$/;"	f
relDiff	project2/deterministic/relDiff.m	/^function [XrelDiff,XDiff]=relDiff(X,diffTime,timeStep,titleCells)$/;"	f
runSimulation	project2/deterministic/runSimulation.m	/^function [timeVector,X,dX,t_ode_cells,y_ode_cells]=runSimulation(theParms)$/;"	f
